exports.up = function(knex, Promise) {
  return knex.schema
    .createTable('account_types', tbl => {
      tbl.increments().unsigned()
      tbl.text('title').notNullable()
      tbl.integer('max_notification_count').notNullable()
    })
    .createTable('users', tbl => {
      tbl.increments().unsigned()
      tbl.text('name').notNullable()
      tbl
        .text('email')
        .notNullable()
        .unique()
      tbl.text('stripe')
      tbl
        .integer('notifications_sent')
        .notNullable()
        .defaultTo(0)
      tbl
        .integer('account_type_id')
        .unsigned()
        .references('id')
        .inTable('account_types')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
        .defaultTo(1)
    })
    .createTable('services', tbl => {
      tbl.increments().unsigned()
      tbl.text('name').notNullable()
    })
    .createTable('tokens', tbl => {
      tbl.increments().unsigned()
      tbl.datetime('expiration')
      tbl.text('auth_token').notNullable()
      tbl.text('refresh_token')
      tbl
        .integer('service_id')
        .unsigned()
        .references('id')
        .inTable('services')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
      tbl
        .integer('user_id')
        .unsigned()
        .references('id')
        .inTable('users')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
    })
    .createTable('team_members', tbl => {
      tbl.increments().unsigned()
      tbl.text('first_name').notNullable()
      tbl.text('last_name').notNullable()
      tbl.text('job_description')
      tbl
        .text('email')
        .notNullable()
        .unique()
      tbl.text('phone_number')
      tbl.text('slack_uuid')
      tbl
        .integer('user_id')
        .unsigned()
        .references('id')
        .inTable('users')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
      tbl
        .integer('manager_id')
        .unsigned()
        .references('id')
        .inTable('team_members')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
      tbl
        .integer('mentor_id')
        .unsigned()
        .references('id')
        .inTable('team_members')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
    })
    .createTable('training_series', tbl => {
      tbl.increments().unsigned()
      tbl.text('title').notNullable()
      tbl.string('image')
      tbl
        .integer('user_id')
        .unsigned()
        .references('id')
        .inTable('users')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
    })
    .createTable('messages', tbl => {
      tbl.increments().unsigned()
      tbl.text('subject').notNullable()
      tbl.text('body').notNullable()
      tbl.text('link')
      tbl
        .integer('training_series_id')
        .unsigned()
        .references('id')
        .inTable('training_series')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
      tbl
        .boolean('for_team_member')
        .notNullable()
        .defaultTo(true)
      tbl
        .boolean('for_manager')
        .notNullable()
        .defaultTo(false)
      tbl
        .boolean('for_mentor')
        .notNullable()
        .defaultTo(false)
      tbl.integer('days_from_start').notNullable()
    })
    .createTable('notifications', tbl => {
      tbl.increments().unsigned()
      tbl
        .integer('recipient_id')
        .unsigned()
        .references('id')
        .inTable('team_members')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
      tbl.datetime('send_date').notNullable()
      tbl
        .boolean('is_sent')
        .notNullable()
        .defaultTo(false)
      tbl
        .integer('num_attempts')
        .notNullable()
        .defaultTo(0)
      tbl.text('thread')
      tbl
        .integer('message_id')
        .unsigned()
        .references('id')
        .inTable('messages')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
      tbl
        .integer('service_id')
        .unsigned()
        .references('id')
        .inTable('services')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
      tbl
        .integer('team_member_id')
        .unsigned()
        .references('id')
        .inTable('team_members')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
    })
    .createTable('responses', tbl => {
      tbl.increments().unsigned()
      tbl.text('body')
      tbl
        .integer('notification_id')
        .unsigned()
        .references('id')
        .inTable('notifications')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
        .notNullable()
      tbl
        .timestamp('created_at')
        .notNullable()
        .defaultTo(knex.fn.now())
    })
}

exports.down = function(knex, Promise) {
  return knex.schema
    .dropTableIfExists('responses')
    .dropTableIfExists('notifications')
    .dropTableIfExists('messages')
    .dropTableIfExists('training_series')
    .dropTableIfExists('team_members')
    .dropTableIfExists('tokens')
    .dropTableIfExists('services')
    .dropTableIfExists('users')
    .dropTableIfExists('account_types')
}
